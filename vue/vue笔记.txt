ES6导入包的语法
import 定义名 from '包名'

webpack 的安装
 npm install webpack@5.42.1 webpack-cli@4.7.2 -D
配置webpack在项目的根目录中，创建名为webpack.config.js的webpack配置文件，
module.exports = {
	mode:'development' //mode用来指定构建模式，可选值有development和production
	在开发的时候用development模式，在发布的时候用production模式
	}
在package.json的scripts节点下，新增dev脚本如下
	"scripts":{
		"dev":"webpack"  //scripts  节点下的脚本，可以通过npm run执行，例如npm run dev
	}
在终端运行npm run dev 命令，启动webpack进行项目的打包构建
webpack中默认的约定
	在webpack4和5的版本中默认约定
	默认的打包入口文件为src ->index.js
	默认的输出文件路径为dist ->main.js
可以在webpack.config.js文件中修改默认设置
在webpack.config.js配置文件中，通过entry节点指定打包的入口，通过output节点指定打包的出口

webpack中的插件
webpack-dev-server
	类似于node.js阶段用的nodemon工具
	每当修改源代码，webpack会自动进行项目打包和构建
html-webpack-plugin
	webpack中html插件(类似于一个模板引擎插件)
	可以通过此插件自定制index.html页面的内容
安装插件
npm install webpack-dev-server@3.11.2 -D
npm install html-webpack-plugin
初始vue
        想让vue工作，就必须创建一个vue实例，且要传入一个配置对象
        root容器里的代码依然符合html规范，只不过混入了一些特殊的vue语法
        root容器里的代码称为【vue模板】
    注意区分：js表达式和js代码(语句)
        表达式：一个表达式可以生成一个值，可以放到任何一个需要值的地方
        js代码(语句)
            if(){}//for(){}
 /* data与el的2种写法
            el的两种写法
                1 new Vue时候配置el属性
                2 先创建Vue实例，随后再通过vm.$mount('#root')指定el的值
            data有2种写法
                1 对象式
                2 函数式
                如何选择：目前那种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错
            一个重要的原则：
                由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了 */
            /*  const v = new Vue({
                 //el: '#root',//第一种写法
                 data: {
                     name: '尚硅谷'
                 }
             })
             // 第二种方式
             console.log(v);
 
             v.$mount('#root') */

v-bind:    简写  ：
v-model:   简写 v-model
vue中的数据代理：
        通过vm对象来代理data对象中属性的操作（读/写）
    vue中数据代理的好处
        更加方便的操作data中的数据
    基本原理：
        通过Object.defineProperty()把data对象中所有属性添加到vm上
        为每一个添加到vm上的属性，都指定一个getter/setter
        在getter/setter内容去操作（读/写）data中对应的属性

vue中的修饰符
        1 prevent：阻止默认事件（常用）
        2 stop：阻止事件冒泡（常用）chud
        3 once 事件只触发一次（常用）
        4 capture 使用事件的捕获模式
        5 self 只有event.target是当前操作的元素是才触发事件
        6 passive 事件的默认行为立即执行，无需等待事件回调执行完毕

Vue中场用的按键别名
回车 => enter
删除 => delete (捕获‘删除’和‘退格’键)
退出 => esc
空格 => space
换行 => tab   （特殊必须配合 keydown使用）
上 => up
下 => down
左 => left
右 => right

Vue未提供别名的按键 可以使用按键原始值的key值去绑定，但注意要转换未kebab-case (短横线命名)

系统修饰键(用法特殊) ctrl，alt，shift，meta
    1 配合keyup使用：按下修时间的同时，再按下其他键，随后释放其他键，事件被触发
    2 配合keydown使用，正常触发事件
也可以使用keyCode去指定具体的按键(不推荐)

Vue.config.keyCode自定义键名 = 键码，可以去定制按键别名 

计算属性：
        1 定义：要用的属性不存在，要通过以右属性计算得来
        2 原理：底层借助了Objcet.defineproperty方法提供的getter和setter
        3 get函数什么时候执行
            1 初次读取时会执行
            2 当依赖的数据发生改变时会被再次调用
        4 优势 与methods实现相比，内部有缓存机制(方便复用)，效率更高，调试方便
        5 备注
            1 计算属性最终会出现在vm上，直接读取使用即可
            2 如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算的依赖数据发生改变时要重新赋值




















